// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Teacher {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  image     String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dept_id   String
  dept      Department @relation(fields: [dept_id], references: [id])
  batches   String[]
  subjects  String[]
}

model Student {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  image     String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dept_id   String
  dept      Department @relation(fields: [dept_id], references: [id])
  batch_id  String
  batch     Batch @relation(fields: [batch_id], references: [id])
  attendance Attendance[]
  submissions Submission[]
}

model Department {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  batches   Batch[]
  teachers  Teacher[]
  students  Student[]
}

model Batch {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  students  Student[]
  subjects  Subject[]
  dept_id   String
  dept      Department @relation(fields: [dept_id], references: [id])
}

model Subject {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  batch_id  String
  batch     Batch @relation(fields: [batch_id], references: [id])
  notes     Note[]
  sessions  Session[]
}

model Note {
  id        String   @id @default(uuid())
  title     String?
  description String?
  files      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  subject_id String
  subject    Subject @relation(fields: [subject_id], references: [id])
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  title     String?
  date      DateTime
  subject_id String
  subject    Subject @relation(fields: [subject_id], references: [id])
  attendance Attendance[]
  assignment_id String?
}

model Assignment {
  id        String   @id @default(uuid())
  title     String?
  description String?
  files      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  session_id String
  endDate   DateTime?
  submissions Submission[]
}

model Attendance {
  id        String   @id @default(uuid())
  status    Status
  student_id String
  student    Student @relation(fields: [student_id], references: [id])
  session_id String
  session    Session @relation(fields: [session_id], references: [id])
  @@unique([student_id, session_id])
}

enum Status{
  PRESENT
  ABSENT
  LATE
}

model Submission {
  id        String   @id @default(uuid())
  files     String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student_id String
  student    Student @relation(fields: [student_id], references: [id])
  assignment_id String
  assignment    Assignment @relation(fields: [assignment_id], references: [id])
}